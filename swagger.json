{
  "openapi": "3.0.0",
  "info": {
    "title": "ALMA Backend API Documentation",
    "description": "Back-end API to manage users",
    "contact": {
      "name": "Rafael Ribeiro",
      "url": "https://www.wophi.be/alma/support",
      "email": "alma@wophi.be"
    },
    "version": "3.0.0"
  },

  "paths": {
    "/user/signup": {
      "post": {
        "summary": "Create user",
        "description": "Route to register new users. A token with 30 minutes expiration time is sent to the provided email",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              },
              "examples": {
                "example1": {
                  "summary": "Example of a valid user registration",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "Joane Eod",
                    "username": "jd",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "email": "johndoe@example.com",
                    "phone": "1234567890",
                    "password": "#Password123",
                    "passwordConfirmation": "#Password123",
                    "originChannel": "WOPHI"
                  }
                },
                "example2": {
                  "summary": "Example of required fields only",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "motherName": "Jane Doe",
                    "phone": "1234567890",
                    "email": "johndoe@example.com",
                    "password": "#Password123",
                    "passwordConfirmation": "#Password123",
                    "originChannel": "WOPHI"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": "123456",
                  "personal": {
                    "id": "789012",
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "Joane Oed",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe"
                  },
                  "contact": {
                    "id": "345678",
                    "username": "jd",
                    "phone": "1234567890",
                    "email": "johndoe@example.com"
                  },
                  "security": {
                    "id": "901234",
                    "status": "PENDING_CONFIRMATION"
                  },
                  "allowedChannels": ["WOPHI"],
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-10T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": ["One or more fields are missing or invalid"],
                    "code": "bad.request",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid ip address",
                    "code": "user-service.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "field already in use by another user",
                    "value": {
                      "error": {
                        "message": "[ 'email', 'phone' ] already in use",
                        "code": "user-repository.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "accessing new channel",
                    "value": {
                      "error": {
                        "message": "User 'user.id' registered on [ user.allowed_channels ] platform. A confirmation token was sent to 'user.contact.email' and after confirmation, use the same credentials from 'user.allowed_channels' to access [ data.originChannel ].",
                        "code": "user-service.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "passwords do not match",
                    "code": "user-service.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },

                "examples": {
                  "example1": {
                    "summary": "repository error",
                    "value": {
                      "error": {
                        "message": "user not created",
                        "code": "user-repository.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "service error",
                    "value": {
                      "error": {
                        "message": "failed to create user",
                        "code": "user-service.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "email service error",
                    "value": {
                      "error": {
                        "message": "failed to send email for account confirmation",
                        "code": "email-service.sendConfirmationEmail",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "failed to create access to new channel service",
                    "value": {
                      "error": {
                        "message": "failed to create access to new channel",
                        "code": "user-service.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example5": {
                    "summary": "failed to create access to new channel repository",
                    "value": {
                      "error": {
                        "message": "failed to create access to new channel",
                        "code": "user-service.createUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example6": {
                    "summary": "failed to send message to amazon simple queue service",
                    "value": {
                      "error": {
                        "message": "failed to send message to SQS",
                        "code": "email-service.sendMessageToSQS",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example7": {
                    "summary": "failed to poll messages from amazon simple queue service",
                    "value": {
                      "error": {
                        "message": "error polling messages from SQS: `error message`",
                        "code": "sqs-worker-service.pollMessagesFromSQS",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example8": {
                    "summary": "failed to process email",
                    "value": {
                      "error": {
                        "message": "error processing message: `error message`",
                        "code": "sqs-worker-service.processMessage",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/auth/account/{token}": {
      "patch": {
        "summary": "Confirm user account email",
        "description": "Route to confirm user's account email",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Confirmation token for user registration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account email confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                },
                "example": {
                  "message": "account email successfully confirmed"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid or expired token",
                    "code": "auth-service.confirmEmail",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid ip address",
                    "code": "auth-service.confirmEmail",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Internal Error",
                    "value": {
                      "error": {
                        "message": "Account not confirmed",
                        "code": "auth-repository.confirmAccountEmail",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid token",
                    "value": {
                      "error": {
                        "message": "could not get user",
                        "code": "auth-repository.findUserByToken",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "User login",
        "description": "Authenticate a user with the provided credentials",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentials"
              },
              "example": {
                "email": "johndoe@example.com",
                "password": "password123",
                "origin": "wophi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToken"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c",
                  "refreshToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKeta2yJV_add8tw5c"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "email or password is invalid",
                    "code": "local-auth.guards",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error",
                    "code": "internal.server.error",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/auth/send-recover-password-email": {
      "post": {
        "summary": "Send recover password email",
        "description": "Send an email to the user with instructions to recover their password. Recover token has an expiration time of 30 minutes",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRecover"
              },
              "example": {
                "email": "johndoe@example.com",
                "originChannel": "WOPHI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                },
                "example": {
                  "message": "recover password email sent"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user with this email not found",
                    "code": "auth-repository.sendRecoverPasswordEmail",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "failed to send email for recover password",
                    "code": "email-service.sendRecoverPasswordEmail",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password/{token}": {
      "patch": {
        "summary": "Reset user password",
        "description": "Route to reset user password using the recovery token sent by email",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Recovery token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              },
              "example": {
                "password": "newpassword",
                "passwordConfirmation": "newpassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassword"
                },
                "example": {
                  "message": "password reseted"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Invalid password",
                    "value": {
                      "error": {
                        "message": "passwords do not match",
                        "code": "recover-password-service.resetPassword",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid or expired token",
                    "value": {
                      "error": {
                        "message": "invalid or expired token",
                        "code": "auth-service.confirmEmail",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid ip address",
                    "code": "auth-service.resetPassword",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid recover token",
                    "code": "auth-repository.resetPassword",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Internal error",
                    "value": {
                      "error": {
                        "message": "password not reseted",
                        "code": "auth-repository.resetPassword",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid token",
                    "value": {
                      "error": {
                        "message": "could not get user",
                        "code": "auth-repository.findUserByToken",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get me",
        "description": "Route to get user by access token",
        "tags": ["Authentication"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User informations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayload"
                },
                "example": {
                  "id": "123456",
                  "username": "johndoe",
                  "email": "johndoe@example.com"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/auth/account/resend-token": {
      "patch": {
        "summary": "Resend account confirmation token",
        "description": "Endpoint to resend new account confirmation token. Token has an expiration time of 30 minutes",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmail"
              },
              "example": {
                "email": "johndoe@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                },
                "example": {
                  "message": "account confirmation token resent to johndoe@example.com"
                }
              }
            }
          },
          "400": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Missing request body parameter",
                    "value": {
                      "error": {
                        "message": "Missing email parameter in request body",
                        "code": "auth-services.resendAccountToken",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Invalid email",
                    "value": {
                      "error": {
                        "message": "new email provided is already in use",
                        "code": "auth-services.resendAccountToken",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "Token not generated",
                    "value": {
                      "error": {
                        "message": "Account token not generated",
                        "code": "auth-repository.resendAccountToken",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "Email confirmation not resend",
                    "value": {
                      "error": {
                        "message": "failed to resend account confirmation token",
                        "code": "auth-services.resendAccountToken",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh jwt",
        "description": "Refresh accessToken and refreshToken",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              },
              "example": {
                "refresh": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKeta2yJV_add8tw5c",
                "origin": "wophi"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToken"
                },
                "example": {
                  "accessToken": "eyJhbGyhOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c",
                  "refreshToken": "eyJhbTlaOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adRssw6e"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.refreshJwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error",
                    "code": "internal.server.error",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },

    "/user/filter": {
      "get": {
        "summary": "Get user by filter",
        "description": "Route to get users by filter [id | email | phone]",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "User id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "User email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "User phone",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "example1": {
                    "summary": "User found",
                    "value": {
                      "id": "123456",
                      "personal": {
                        "id": "789012",
                        "firstName": "John",
                        "lastName": "Doe",
                        "socialName": "JD",
                        "bornDate": "1990-01-01",
                        "motherName": "Jane Doe",
                        "updatedAt": "2023-05-10T12:00:00Z"
                      },
                      "contact": {
                        "id": "345678",
                        "username": "johndoe",
                        "email": "johndoe@example.com",
                        "phone": "1234567890",
                        "updatedAt": "2023-05-10T12:00:00Z"
                      },
                      "security": {
                        "id": "901234",
                        "status": "ACTIVE",
                        "updatedAt": "2023-05-11T12:00:00Z"
                      },
                      "allowedChannels": ["WOPHI"],
                      "createdAt": "2023-05-10T12:00:00Z",
                      "updatedAt": "2023-05-11T12:00:00Z"
                    }
                  },
                  "example2": {
                    "summary": "User not found",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "could not get user",
                    "code": "user-repository.userByFilter",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get user by id",
        "description": "Route to get an user by id",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": "123456",
                  "personal": {
                    "id": "789012",
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "JD",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "contact": {
                    "id": "345678",
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "phone": "1234567890",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "security": {
                    "id": "901234",
                    "status": "ACTIVE",
                    "updatedAt": "2023-05-11T12:00:00Z"
                  },
                  "allowedChannels": ["WOPHI"],
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-05-11T12:00:00Z"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not found",
                    "code": "user-repository.getUserById",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    },
    "/user/update": {
      "patch": {
        "summary": "Update user",
        "description": "Route to update user data. If updating account email, a token is sent to the provided email and has an expiration time of 30 minutes",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "examples": {
                "example1": {
                  "summary": "Example of updating password",
                  "value": {
                    "oldPassword": "password123",
                    "newPassword": "newpassword",
                    "passwordConfirmation": "newpassword"
                  }
                },
                "example2": {
                  "summary": "Example of updating username and email",
                  "value": {
                    "username": "Jd",
                    "email": "jd@mail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedUser"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c",
                  "refreshToken": "eyJhbTlaOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adRssw6e",
                  "id": "123456",
                  "personal": {
                    "id": "789012",
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "JD",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "contact": {
                    "id": "345678",
                    "username": "jd",
                    "email": "jd@mail.com",
                    "phone": "1234567890",
                    "updatedAt": "2023-05-13T12:00:00Z"
                  },
                  "security": {
                    "id": "901234",
                    "status": "ACTIVE",
                    "updatedAt": "2023-12-11T12:00:00Z"
                  },
                  "allowedChannels": ["WOPHI"],
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-12-11T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "invalid user id",
                    "value": {
                      "error": {
                        "message": ["user id not found"],
                        "code": "bad.request",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "invalid user id",
                    "value": {
                      "error": {
                        "message": [
                          "One or more fields are missing or invalid"
                        ],
                        "code": "bad.request",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "invalid ip address",
                    "code": "user-service.updateUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "email/phone already taken",
                    "code": "user-repository.createUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "422": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "missing old password propertie",
                    "value": {
                      "error": {
                        "message": "missing 'oldPassword' field",
                        "code": "user-service.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "validate new password",
                    "value": {
                      "error": {
                        "message": "new passwords do not match",
                        "code": "user-service.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "validate old password",
                    "value": {
                      "error": {
                        "message": "old passwords do not match",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example1": {
                    "summary": "repository internal error",
                    "value": {
                      "error": {
                        "message": "user not updated",
                        "code": "user-repository.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example2": {
                    "summary": "service internal error",
                    "value": {
                      "error": {
                        "message": "failed to update user data",
                        "code": "user-service.updateUser",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example3": {
                    "summary": "failed to send message to amazon simple queue service",
                    "value": {
                      "error": {
                        "message": "failed to send message to SQS",
                        "code": "email-service.sendMessageToSQS",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example4": {
                    "summary": "failed to poll messages from amazon simple queue service",
                    "value": {
                      "error": {
                        "message": "error polling messages from SQS: `error message`",
                        "code": "sqs-worker-service.pollMessagesFromSQS",
                        "status": true
                      },
                      "data": {}
                    }
                  },
                  "example5": {
                    "summary": "failed to process email",
                    "value": {
                      "error": {
                        "message": "error processing message: `error message`",
                        "code": "sqs-worker-service.processMessage",
                        "status": true
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "summary": "Delete account",
        "description": "Route to delete user account. After this operation, user will receive the 'CANCELLED' status  and after 21 days if not reactivate, the account will be permanently deleted",
        "tags": ["User"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer {token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": "123456",
                  "personal": {
                    "id": "789012",
                    "firstName": "John",
                    "lastName": "Doe",
                    "socialName": "JD",
                    "bornDate": "1990-01-01",
                    "motherName": "Jane Doe",
                    "updatedAt": "2023-05-10T12:00:00Z"
                  },
                  "contact": {
                    "id": "345678",
                    "username": "jd",
                    "email": "jd@mail.com",
                    "phone": "1234567890",
                    "updatedAt": "2023-05-13T12:00:00Z"
                  },
                  "security": {
                    "id": "901234",
                    "status": "CANCELLED",
                    "updatedAt": "2023-12-11T12:00:00Z"
                  },
                  "allowedChannels": ["WOPHI"],
                  "createdAt": "2023-05-10T12:00:00Z",
                  "updatedAt": "2023-12-11T12:00:00Z"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "Unauthorized",
                    "code": "auth-guard.jwtAuth",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "message": "user not cancelled",
                    "code": "user-repository.deleteUser",
                    "status": true
                  },
                  "data": {}
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "SignUp": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 125,
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "maxLength": 125,
            "description": "Last name of the user"
          },
          "socialName": {
            "type": "string",
            "maxLength": 250,
            "description": "Social name of the user"
          },
          "bornDate": {
            "type": "string",
            "formate": "date-time",
            "description": "Date of birth of the user (yyyy-mm-dd)"
          },
          "motherName": {
            "type": "string",
            "maxLength": 250,
            "description": "Mother's name of the user"
          },
          "username": {
            "type": "string",
            "maxLength": 45,
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "maxLength": 250,
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "password": {
            "type": "string",
            "minLength": "7",
            "pattern": "at least one uppercase letter, one lowercase letter and one number or symbol",
            "description": "Password of the user"
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Password confirmation"
          },
          "originChannel": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Origin channel of the user"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "bornDate",
          "motherName",
          "email",
          "phone",
          "password",
          "passwordConfirmation",
          "originChannel"
        ]
      },

      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "personal": {
            "$ref": "#/components/schemas/Personal"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "security": {
            "$ref": "#/components/schemas/Security"
          },
          "allowedChannels": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Channels that user can access"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last user update"
          }
        }
      },
      "UpdatedUser": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token used for authentication in subsequent API calls. This token should be included in the 'Authorization' header as a Bearer Token"
          },
          "refreshToken": {
            "type": "string",
            "description": "Token used to refresh user accessToken"
          },
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "personal": {
            "$ref": "#/components/schemas/Personal"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "security": {
            "$ref": "#/components/schemas/Security"
          },
          "allowedChannels": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Channels that user can access"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of user creation"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last user update"
          }
        }
      },
      "Personal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Personal information ID"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "socialName": {
            "type": "string",
            "description": "Social name of the user"
          },
          "bornDate": {
            "type": "string",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the user"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact information ID"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          }
        }
      },
      "Security": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Security information ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING_CONFIRMATION",
              "ACTIVE",
              "BLOCKED",
              "CANCELLED",
              "BANNED"
            ],
            "description": "User status"
          }
        }
      },
      "UserCredentials": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "description": "Password of the user"
          },
          "origin": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Origin channel of the user"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string",
            "description": "Refresh token to generate a new user accessToken"
          },
          "origin": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Origin channel of the user"
          }
        }
      },
      "UserToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token used for authentication in subsequent API calls. This token should be included in the 'Authorization' header as a Bearer Token"
          },
          "refreshToken": {
            "type": "string",
            "description": "Token used to refresh user accessToken"
          }
        }
      },
      "PasswordRecover": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "originChannel": {
            "type": "string",
            "enum": ["WOPHI", "LUMIN", "MIAU"],
            "description": "Origin channel of the user"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "minLength": "7",
            "pattern": "at least one uppercase letter, one lowercase letter and one number or symbol",
            "description": "Password of the user"
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Password confirmation"
          }
        }
      },
      "UserPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact information ID"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "socialName": {
            "type": "string",
            "description": "Social name of the user"
          },
          "bornDate": {
            "type": "string",
            "description": "Date of birth of the user"
          },
          "motherName": {
            "type": "string",
            "description": "Mother's name of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "oldPassword": {
            "type": "string",
            "description": "Account old password"
          },
          "newPassword": {
            "type": "string",
            "description": "Account new password"
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Password confirmation"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING_CONFIRMATION",
              "ACTIVE",
              "BLOCKED",
              "CANCELLED",
              "BANNED"
            ],
            "description": "Status of the user"
          }
        }
      },
      "UserEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to resend confirmation account"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "status": {
                "type": "boolean",
                "description": "Error status"
              }
            }
          },
          "data": {
            "type": "object",
            "properties": {}
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
